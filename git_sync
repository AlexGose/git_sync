#!/bin/bash

error() {
  echo "Error: $1" >&2
  exit 1
}

usage() {
  local usage_string
  usage_string="Usage: git_sync OPTIONS
  OPTIONS
  -h                    Display this help message
  -f                    Fetch changes in the Git repository
  -d PATH               Path to the directory of the Git repository"
  echo "${usage_string}"
}

# Execute a Git command in the given repository
# Usage: run_git_command <command> <path to repository>
# Inputs: 
#     <command> - Git command ("fetch" or "pull")
#     <path to repository> - path to the local Git repository
# Modifies the local Git repository located at <path to repository>.
# When <command> is "fetch", the command "git fetch" will be run. When
# <command> is "pull" the command "get pull" will be run.
run_git_command() {
  local current_dir
  current_dir="$(pwd)"
  if (( $# < 2 )); then
    error "Too few arguments: $@"
  fi
  
  if [[ "$1" == "fetch" || "$1" == "pull" ]]; then
    if ! git -C "$2" "$1"; then
      cd "${current_dir}"
      error "Unable to execute Git command in directory: $2"
    fi
  else
    error "Unsupported Git command: $1"
  fi
}

main() {
  if (( $# == 0 )); then
      usage
      error "git_sync requires at least one option"
  fi
  
  local fetch_flag
  fetch_flag="false"
  local pull_flag
  pull_flag="false"
  local repo_dir
  repo_dir="$(pwd)"
  
  while getopts :hfpd: opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      f) fetch_flag="true" ;;
      p) pull_flag="true" ;;
      d) repo_dir="${OPTARG}" ;;
      *) error "Unkown option: ${opt}" ;;
    esac
  done
  
  if [[ "${fetch_flag}" == "true" ]]; then
    run_git_command fetch "${repo_dir}"
  fi
  if [[ "${pull_flag}" == "true" ]]; then
    run_git_command pull "${repo_dir}"
  fi
}

main "$@"
