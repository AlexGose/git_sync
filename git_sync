#!/bin/bash
#
# Git-based utility for syncronizing files on multiple machines

error() {
  echo "Error: $1" >&2
  exit 1
}

usage() {
  local usage_string
  usage_string="Usage: git_sync OPTIONS
  OPTIONS
  -h                    Display this help message
  -f                    Fetch changes in the remote Git repository origin
  -p                    Pull changes from the remote Git repository origin
  -s                    Stage any unstaged changes
  -c                    Commit any staged changes if the index has not been
                        updated after a sufficient wait time
  -C                    Commit and push any staged changes if the index has
                        not been updated after sufficient wait time
  -d PATH               Path to the directory of the Git repository
  -t TIME               Wait time in minutes since the last staged change
                        before any new commit is made (default 20 minutes)"
  echo "${usage_string}"
}

# Execute a Git command in the given repository
# Usage: run_git_command <command> <path to repository>
# Inputs: 
#     <command> - Git command ("fetch", "pull", "stage", etc.)
#     <path to repository> - path to the local Git repository
# Modifies the local Git repository located at <path to repository>.
# When <command> is
#   fetch -  the command `git fetch` will be run.
#   pull  -  the command `git pull` will be run.
#   stage -  the command `git add .` will be run.
#   commit - the command `git commit -m "Commit old staged changes"` will be
#              run.
#   diff -   the command `git diff --cached` will be run.
#   push -   the command `git push` will be run.
run_git_command() {
  if (( $# < 2 )); then
    error "Too few arguments: $@"
  fi
  
  local run_flag
  run_flag="false"
  local git_command
  case "$1" in
    fetch)
      run_flag="true"
      git_command="fetch"
      ;;
    pull)
      run_flag="true"
      git_command="pull"
      ;;
    stage)
      run_flag="true"
      git_command=("add" ".")
      ;;
    commit)
      run_flag="true"
      git_command=("commit" "-m" "Commit old staged changes")
      ;;
    diff)
      run_flag="true"
      git_command=("diff" "--cached")
      ;;
    push)
      run_flag="true"
      git_command="push"
      ;;
    *) error "Unsupported Git command: $1" ;;
  esac
  
  if [[ "${run_flag}" == "true" ]]; then
    if ! git -C "$2" "${git_command[@]}"; then
      error "Unable to execute "${git_command[@]}" in directory: $2"
    fi
  else
    error "Unsupported Git command: $1"
  fi
}

# Commit any staged changes if enough time has elapsed
# Usage: commit_if_ready <wait time in minutes> <path> <push flag>
# Inputs:
#   <wait time in minutes> - minimum elapsed time in minutes required since 
#                            the last changes were staged
#   <path> -      directory of the local Git repository
#   <push flag> - if equal to "true", then push after committing
# Modifies the local Git repository if staged changes are present and 
# sufficient time has elapsed.  If no staged changes, then do nothing.
commit_if_ready() {
  if (( $# < 3 )); then
      error "Too few arguments: $@"
  fi
  
  if [[ -n "$(run_git_command diff "$2")" ]]; then # there are staged changes
    local index_modify_time_seconds
    index_modified_time_seconds="$(date +%s -r "$2/.git/index")"
    
    local elapsed_time_seconds
    elapsed_time_seconds="$(( $(date +%s) - index_modified_time_seconds ))"
    
    if (( elapsed_time_seconds / $1 >= wait_time_minutes )); then
      run_git_command commit "$2"
      if [[ "$3" == "true" ]]; then
        run_git_command push "$2"
      fi
    fi
  fi
}

main() {
  if (( $# == 0 )); then
      usage
      error "git_sync requires at least one option"
  fi
  
  local fetch_flag
  fetch_flag="false"
  local pull_flag
  pull_flag="false"
  local stage_flag
  stage_flag="false"
  local commit_flag
  commit_flag="false"
  local repo_dir
  repo_dir="$(pwd)"
  local push_flag
  push_flag="false"
  local wait_time_minutes
  wait_time_minutes=20
  
  while getopts :hfpscCd:t: opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      f) fetch_flag="true" ;;
      p) pull_flag="true" ;;
      s) stage_flag="true" ;;
      d)
        repo_dir="${OPTARG}"
        if ! [[ -d "${repo_dir}" ]]; then
          error "Not a valid directory: ${repo_dir}"
        fi
        ;;
      c) commit_flag="true" ;;
      C)
        commit_flag="true"
        push_flag="true"
        ;;
      t)
        if [[ "${OPTARG}" =~ ^[1-9][0-9]*$ ]]; then
          wait_time_minutes="${OPTARG}"
        else
          error "Not a valid wait time: ${OPTARG}"
        fi
        ;;
      *) error "Unkown option: ${opt}" ;;
    esac
  done
  
  if [[ "${fetch_flag}" == "true" ]]; then
    run_git_command fetch "${repo_dir}"
  fi
  if [[ "${pull_flag}" == "true" ]]; then
    run_git_command pull "${repo_dir}"
  fi
  if [[ "${stage_flag}" == "true" ]]; then
    run_git_command stage "${repo_dir}"
  fi
  if [[ "${commit_flag}" == "true" ]]; then
    commit_if_ready "${wait_time_minutes}" "${repo_dir}" "${push_flag}"
  fi
}

main "$@"
